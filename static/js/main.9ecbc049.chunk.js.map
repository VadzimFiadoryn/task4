{"version":3,"sources":["Name/Name.module.css","App.module.css","myQualities/Quality.module.css","Input/Input.module.css","Name/Name.jsx","myQualities/Qualitys.jsx","Input/InputButton.jsx","Input/Input.jsx","Input/InputForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Name","className","styles","Qualitys","arrQ","map","el","num","key","Quality","InputButton","props","onClick","updateData","Input","ref","refLinkInput","InputForm","App","state","Names","React","createRef","current","value","newAr","setState","newNemes","this","app","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,uMCUXC,MARf,WACI,OACI,yBAAKC,UAAWC,IAAOF,MAAvB,U,gCCSOG,MAVf,WACI,IACMC,EADU,CAAC,KAAM,KAAM,MACRC,KAAI,SAACC,EAAIC,GAAL,OAAa,yBAAKC,IAAOD,GAAZ,KAAoBD,EAApB,SACtC,OACI,yBAAKL,UAAWC,IAAOO,SAClBL,ICCEM,MARf,SAAqBC,GACjB,OACI,6BACI,4BAAQC,QAASD,EAAME,YAAvB,S,gBCMGC,MARf,SAAeH,GACX,OACI,yBAAKV,UAAWC,IAAOY,OACnB,2BAAOC,IAAKJ,EAAMK,iBCMfC,MATf,SAAmBN,GACf,OACI,6BACI,kBAAC,EAAD,CAAOK,aAAcL,EAAMK,eAC3B,kBAAC,EAAD,CAAaH,WAAYF,EAAME,eCyB5BK,E,2MAzBXC,MAAQ,CACJC,MAAO,I,EAEXJ,aAAeK,IAAMC,Y,EACrBT,WAAa,WACT,IAAIE,EAAM,EAAKC,aAAaO,QAAQC,MAChCC,EAAK,sBAAO,EAAKN,MAAMC,OAAlB,CAAyBL,IAClC,EAAKW,SAAS,CAAEN,MAAMK,IAEtB,EAAKT,aAAaO,QAAQC,MAAQ,I,wEAGlC,IAAMG,EACFC,KAAKT,MAAMC,MAAMf,KAAI,SAACC,EAAIE,GAAL,OAAa,yBAAKA,IAAKA,GAAMF,EAAhB,QACtC,OACI,yBAAKL,UAAWC,IAAO2B,KACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWhB,WAAYe,KAAKf,WAAYG,aAAcY,KAAKZ,eAC1DW,O,GApBCN,IAAMS,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9ecbc049.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Name\":\"Name_Name__3FyJG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2eRQ2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quality\":\"Quality_Quality__1D-_4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ORbD\"};","import React from 'react';\r\nimport styles from './Name.module.css';\r\n\r\nfunction Name() {\r\n    return (\r\n        <div className={styles.Name}>\r\n            VADIM\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Name;\r\n","import React from 'react';\r\nimport styles from './Quality.module.css';\r\n//import Quality from \"./Quality\";\r\n\r\nfunction Qualitys() {\r\n    const Quality = ['11', '22', '33'];\r\n    const arrQ = Quality.map((el, num) => <div key = {num}>  {el}  </div>)\r\n    return (\r\n        <div className={styles.Quality}>\r\n            {arrQ}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Qualitys;\r\n","import React from 'react';\r\n\r\nfunction InputButton(props) {\r\n    return (\r\n        <div>\r\n            <button onClick={props.updateData}>ADD</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputButton;\r\n","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nfunction Input(props) {\r\n    return (\r\n        <div className={styles.Input}>\r\n            <input ref={props.refLinkInput}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport InputButton from \"./InputButton\";\r\nimport Input from \"./Input\";\r\nfunction InputForm(props) {\r\n    return (\r\n        <div>\r\n            <Input refLinkInput={props.refLinkInput}/>\r\n            <InputButton updateData={props.updateData}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputForm;\r\n","import React from 'react';\r\nimport Name from './Name/Name.jsx';\r\nimport styles from './App.module.css';\r\nimport Qualitys from \"./myQualities/Qualitys\";\r\nimport InputForm from \"./Input/InputForm\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        Names: [],\r\n    };\r\n    refLinkInput = React.createRef()\r\n    updateData = () => {\r\n        let ref = this.refLinkInput.current.value;\r\n        let newAr = [...this.state.Names, ref];\r\n        this.setState({ Names:newAr });\r\n        debugger;\r\n        this.refLinkInput.current.value = \"\";\r\n    }\r\n    render() {\r\n        const newNemes =\r\n            this.state.Names.map((el, key) => <div key={key}>{el} </div>)\r\n        return (\r\n            <div className={styles.app}>\r\n                <Name/>\r\n                <Qualitys/>\r\n                <InputForm updateData={this.updateData} refLinkInput={this.refLinkInput}/>\r\n                {newNemes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}