{"version":3,"sources":["NawBar/NawBar.module.css","App.module.css","Input/Input.module.css","Name/Name.module.css","myQualities/Quality.module.css","NawBar/Hidden.jsx","NawBar/NawBar.jsx","Name/Name.jsx","myQualities/Qualitys.jsx","Input/Input.jsx","Input/InputForm.jsx","FirstTask/FirstTask.jsx","Home/Home.jsx","SecondTask/TodoListHeader.js","SecondTask/TodoListTask.js","SecondTask/TodoListTasks.js","SecondTask/TodoListFooter.js","SecondTask/surse/saveState.js","SecondTask/surse/restoreState.js","SecondTask/SecondTask.js","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Hidden","SetNewPath","path","props","className","styles","to","activeClassName","activeLink","onClick","React","Component","NawBar","state","isHidden","changeStateNawBar","setState","this","Show","Name","Qualitys","arrQ","map","el","num","key","Quality","Input","error","title","onChangeTitle","e","currentTarget","value","addNewTitle","updateData","pressEnter","ErrorRed","InputBlue","onChange","onKeyPress","InputForm","refLinkInput","FirstTask","Names","name","newNemes","Home","TodoListHeader","onAddTaskClick","newTitle","addTask","render","type","placeholder","TodoListTask","editMode","onIsDoneChanged","changeStatus","task","id","checked","activateEditMode","diactivateEditMode","ChangeTitle","isDone","deleteTask","autoFocus","onBlur","priority","TodoListTasks","tasksElements","tasks","t","i","TodoListFooter","onShow","onHidden","classForAll","filterValue","classForCompleted","classForActive","changeFilter","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","parse","SecondTask","nextTaskId","newTitleText","newTask","newTasks","newList","filter","newFilterValue","changeTask","taskId","obj","forEach","LocalStr","App","infoPage","path1","app","Switch","Route","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7b7ba2bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hidden\":\"NawBar_Hidden__3zbCp\",\"Show\":\"NawBar_Show__1R29O\",\"activeLink\":\"NawBar_activeLink__3wGa7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__28qZ5\",\"FirstTask\":\"App_FirstTask__-MTYr\",\"NawBar\":\"App_NawBar__2PO1x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2t2Mp\",\"ErrorRed\":\"Input_ErrorRed__3nwe0\",\"InputBlue\":\"Input_InputBlue__1o9OK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Name\":\"Name_Name__1bL83\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quality\":\"Quality_Quality__1XAWA\"};","import React from 'react';\r\nimport styles from \"./NawBar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Hidden extends React.Component {\r\n\r\n    SetNewPath = (path) => {\r\n        this.props.SetNewPath(path)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Hidden}>\r\n                <NavLink to=\"/Home\" activeClassName={styles.activeLink}\r\n                         onClick={() => this.SetNewPath('/Home')}> Home </NavLink>\r\n\r\n                <NavLink to=\"/FirstTask\" activeClassName={styles.activeLink}\r\n                         onClick={() => this.SetNewPath('/FirstTask')}> FirstTask </NavLink>\r\n\r\n                <NavLink to=\"/SecondTask\" activeClassName={styles.activeLink}\r\n                         onClick={() => this.SetNewPath('/SecondTask')}> SecondTask </NavLink>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hidden;\r\n","import React from 'react';\r\nimport styles from \"./NawBar.module.css\";\r\nimport Hidden from \"./Hidden\";\r\n\r\n\r\nclass NawBar extends React.Component {\r\n    state = {\r\n        isHidden: false\r\n    }\r\n    changeStateNawBar = () => {\r\n        this.state.isHidden ? this.setState({isHidden: false}) : this.setState({isHidden: true})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.isHidden && <span\r\n                    onClick={() => this.changeStateNawBar()}\r\n                    className={styles.Hidden}>\r\n                    {\">\"}\r\n                    </span>\r\n                || <Hidden SetNewPath={this.props.SetNewPath}/>}\r\n                {!this.state.isHidden && <span\r\n                    onClick={() => this.changeStateNawBar()}\r\n                    className={styles.Show}>\r\n                    {\"<\"} </span>}\r\n            </div>\r\n\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default NawBar;\r\n","import React from 'react';\r\nimport styles from './Name.module.css';\r\n\r\nfunction Name() {\r\n    return (\r\n        <div className={styles.Name}>\r\n           <h1>MY NAME'S VADIM</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Name;\r\n","import React from 'react';\r\nimport styles from './Quality.module.css';\r\n\r\nfunction Qualitys() {\r\n    const Quality = ['skill ', 'skill ', 'skill '];\r\n    const arrQ = Quality.map((el, num) => <div key={num}>  {el}  </div>)\r\n    return (\r\n        <div className={styles.Quality}>\r\n            {arrQ}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Qualitys;\r\n","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nclass Input extends React.Component {\r\n\r\n    state = {\r\n        error: false,\r\n        title: \"\",\r\n    };\r\n\r\n    onChangeTitle = (e) => {\r\n        this.setState({\r\n            title: e.currentTarget.value,\r\n            error: false\r\n        })\r\n        if (e.currentTarget.value === \"\") {\r\n            this.setState({error: true})\r\n        }\r\n    }\r\n\r\n    addNewTitle = () => {\r\n        if (this.state.title === \"\") {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.props.updateData(this.state.title)\r\n            this.setState({\r\n                title: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    pressEnter = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.addNewTitle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Input}>\r\n                <input\r\n                    className={(this.state.error) ? styles.ErrorRed : styles.InputBlue}\r\n                    onChange={this.onChangeTitle}\r\n                    onKeyPress={this.pressEnter}\r\n                    value={this.state.title}\r\n                />\r\n                <div>\r\n                    <button onClick={this.addNewTitle}>ADD</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Input from \"./Input\";\r\nfunction InputForm(props) {\r\n    return (\r\n        <div>\r\n            <Input refLinkInput={props.refLinkInput} updateData={props.updateData}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport Name from '../Name/Name.jsx';\r\nimport styles from '../App.module.css';\r\nimport Qualitys from \"../myQualities/Qualitys\";\r\nimport InputForm from \"../Input/InputForm\";\r\n\r\nclass FirstTask extends React.Component {\r\n    state = {\r\n        Names: [],\r\n    };\r\n\r\n    updateData = (name) => {\r\n        {\r\n            this.setState({Names: [...this.state.Names,  \"hi, \" + name]});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const newNemes =\r\n            this.state.Names.map((el, key) => <div key={key}>{el} </div>)\r\n        return (\r\n            <div className={styles.FirstTask}>\r\n                <Name/>\r\n                <Qualitys/>\r\n                <InputForm updateData={this.updateData}/>\r\n                {newNemes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FirstTask;\r\n","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            HOME PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoListHeader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        error: false,\n        title: \"\"\n    };\n\n    onAddTaskClick = () => {\n        let newTitle = this.state.title;\n        this.setState({title: ''});\n        if (newTitle === \"\") {\n            // сетаем в стейт {error: true}\n            this.setState({error: true})\n        } else {\n            this.setState({error: false})\n            this.props.addTask(newTitle);\n        }\n    }\n    onKeyPress = (e) => {\n        if (e.key === \"Enter\")\n            this.onAddTaskClick();\n    }\n\n    render = () => {\n        return (\n            <div className=\"todoList-header\">\n                <h3 className=\"todoList-header__title\">What to Learn</h3>\n                <div className=\"todoList-newTaskForm\">\n                    <input onKeyPress={this.onKeyPress}\n                           onChange={(e) => {\n                               this.setState({error: false, title: e.currentTarget.value})\n                           }}\n                           className={this.state.error ? \"error\" : \"\"}\n                           type=\"text\"\n                           value={this.state.title}\n                           placeholder=\"New task name\"/>\n                    <button onClick={this.onAddTaskClick}>Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\nTodoListHeader.propTypes = {\n    refTitleTask: PropTypes.object,\n    onAddTaskClick: PropTypes.func,\n}\n\n","import React from 'react';\nimport PropType from 'prop-types';\n\nclass TodoListTask extends React.Component {\n    state = {\n        editMode: false\n    }\n    onIsDoneChanged = (e) => {\n        this.props.changeStatus(this.props.task.id, e.currentTarget.checked)\n    }\n    activateEditMode = () => {\n        this.setState({editMode: true})\n    }\n    diactivateEditMode = () => {\n    this.setState({editMode: false})\n    }\n    onChangeTitle =(e) =>{\n      this.props.ChangeTitle(this.props.task.id,e.currentTarget.value)\n   }\n\n\n    render = () => {\n        return (\n            <div className={this.props.task.isDone ? \"todoListTaskDone\" : \"\"}>\n                <input\n                    type={'checkbox'}\n                    checked={this.props.task.isDone}\n                    onChange={this.onIsDoneChanged}/>\n                <button onClick={()=> this.props.deleteTask(this.props.task.id)}>DEL</button>\n                {this.state.editMode\n                    ? <input value={this.props.task.title}\n                       autoFocus={true}\n                       onBlur={this.diactivateEditMode}\n                       onChange={this.onChangeTitle}/>\n                    : <span onClick={this.activateEditMode}>\n\n                        {this.props.task.id} -\n                        {this.props.task.title}\n                        - priority: {this.props.task.priority}\n                </span>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;\n\nTodoListTask.propTypes = {\n    title: PropType.string,\n    isDone: PropType.bool,\n    priority: PropType.string,\n}","import React from 'react';\nimport TodoListTask from \"./TodoListTask\";\nimport propTypes from 'prop-types'\n\nclass TodoListTasks extends React.Component {\n    render = () => {\n        let tasksElements = this.props.tasks.map((t, i) => {\n            return (\n                <TodoListTask\n                    task={t}\n                    key={i}\n                    ChangeTitle ={this.props.ChangeTitle}\n                    changeStatus={this.props.changeStatus}\n                    deleteTask = {this.props.deleteTask}\n                />\n            )\n        });\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n        );\n    }\n}\n\nexport default TodoListTasks;\nTodoListTasks.propTypes = {\n    tasks: propTypes.arrayOf(propTypes.object)\n}","import React from 'react';\nimport propTypes from 'prop-types';\n\nclass TodoListFooter extends React.Component {\n    state = {\n        isHidden: true\n    }\n    onShow = () => {\n        this.setState({isHidden: true})\n    }\n    onHidden = () => {\n        this.setState({isHidden: false})\n    }\n    render = () => {\n\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n        return (\n            <div className=\"todoList-footer\">\n                {this.state.isHidden && <div>\n                    <button onClick={() => {\n                        this.props.changeFilter('All')\n                    }} className={classForAll}>\n                        All\n                    </button>\n                    <button onClick={() => {\n                        this.props.changeFilter('Completed')\n                    }} className={classForCompleted}>\n                        Completed\n                    </button>\n                    <button onClick={() => {\n                        this.props.changeFilter('Active')\n                    }} className={classForActive}>\n                        Active\n                    </button>\n                </div>\n                }\n                {!this.state.isHidden && <span onClick={() => this.onShow()}>hidden</span>}\n                {this.state.isHidden && <span onClick={() => this.onHidden()}>show</span>}\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\nTodoListFooter.propTypes = {\n    filterValue: propTypes.string\n}","import React from 'react';\n\nconst saveState = (state) => {\n    let stateAsString = JSON.stringify(state);\n    localStorage.setItem(\"our-state\", stateAsString);\n}\nexport default saveState;","import React from 'react';\n\n\nconst restoreState = () => {\n    let state = {\n        tasks: [],\n        filterValue: \"All\"\n    }\n    let stateAsString = localStorage.getItem(\"our-state\");\n    if (stateAsString != null) {\n        state = JSON.parse(stateAsString);\n    }\n    return state;\n}\n\n\nexport default restoreState;","import React from 'react';\nimport './SecondTask.css';\nimport TodoListHeader from \"./TodoListHeader\";\nimport TodoListTasks from \"./TodoListTasks\";\nimport TodoListFooter from \"./TodoListFooter\";\nimport saveState from \"./surse/saveState\";\nimport restoreState from \"./surse/restoreState\";\n\nclass SecondTask extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        let LocalStr = restoreState();\n        this.setState(LocalStr, () => {\n            this.state.tasks.forEach(t => {\n                if (t.id >= this.nextTaskId) {\n                    this.nextTaskId = t.id + 1\n                }\n            })\n        })\n    }\n\n    nextTaskId = 0;\n\n    state = {\n        tasks: [],\n        filterValue: 'All'\n    }\n\n    addTask = (newTitleText) => {\n        let newTask = {\n            id: this.nextTaskId,\n            title: newTitleText,\n            isDone: false,\n            priority: 'low'\n        }\n        /*let newTasks=this.state.tasks.push(newTask) */\n        this.nextTaskId++\n        let newTasks = [...this.state.tasks, newTask]\n        this.setState({tasks: newTasks}, () => {\n            saveState(this.state)\n        })\n    }\n    deleteTask = (id) => {\n        let newList = this.state.tasks.filter(t => t.id !== id)\n        this.setState({tasks: newList}, () => {\n            saveState(this.state)\n        })\n    }\n\n    changeFilter = (newFilterValue) => {\n        this.setState({filterValue: newFilterValue}, () => {\n            saveState(this.state)\n        })\n    }\n\n    changeTask = (taskId, obj) => {\n        obj = this.state.tasks.map(t => {\n            if (t.id !== taskId) {\n                return t\n            } else {\n                return {...t, title: obj}\n            }\n        })\n        this.setState({tasks: obj}, () => {\n            saveState(this.state)\n        })\n    }\n\n    // saveState = () => {\n    //     let stateAsString = JSON.stringify(this.state);\n    //     localStorage.setItem(\"our-state\", stateAsString);\n    // }\n\n    restoreState = () => {\n        let state = {\n            tasks: [],\n            filterValue: \"All\"\n        }\n        let stateAsString = localStorage.getItem(\"our-state\");\n        if (stateAsString != null) {\n            state = JSON.parse(stateAsString);\n        }\n        this.setState(state, () => {\n            this.state.tasks.forEach(t => {\n                if (t.id >= this.nextTaskId) {\n                    this.nextTaskId = t.id + 1\n                }\n            })\n        })\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                    <TodoListHeader addTask={this.addTask}/>\n                    <TodoListTasks\n                        deleteTask={this.deleteTask}\n                        ChangeTitle={this.changeTask}\n                        changeStatus={this.changeTask}\n                        tasks={this.state.tasks.filter(t => {\n                            if (this.state.filterValue === 'Active') {\n                                return !t.isDone\n                            } else if (this.state.filterValue === 'Completed') {\n                                return t.isDone\n                            } else if (this.state.filterValue === 'All') {\n                                return true\n                            }\n                        })}/>\n                    <TodoListFooter changeFilter={this.changeFilter} filterValue={this.state.filterValue}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SecondTask;","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport NawBar from \"./NawBar/NawBar\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport FirstTask from \"./FirstTask/FirstTask\";\r\nimport Home from \"./Home/Home\";\r\nimport Switch from \"react-router-dom/es/Switch\";\r\nimport Route from \"react-router-dom/es/Route\";\r\nimport SecondTask from \"./SecondTask/SecondTask\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        infoPage: '',\r\n        path1: ''\r\n    };\r\n\r\n    SetNewPath = (path) => {\r\n        this.setState({\r\n            path1: path\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <div  className={styles.app}>\r\n                    <NawBar SetNewPath={this.SetNewPath} className ={styles.NawBar}/>\r\n                    <Switch>\r\n                        <Route path=\"/Home\" component={Home}/>\r\n                        <Route path=\"/FirstTask\" component={FirstTask}/>\r\n                        <Route path=\"/SecondTask\" component={SecondTask}/>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. SecondTask is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}