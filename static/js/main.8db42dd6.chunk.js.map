{"version":3,"sources":["NawBar/NawBar.module.css","App.module.css","Input/Input.module.css","Name/Name.module.css","myQualities/Quality.module.css","NawBar/Hidden.jsx","NawBar/NawBar.jsx","Name/Name.jsx","myQualities/Qualitys.jsx","Input/Input.jsx","Input/InputForm.jsx","FirstTask/FirstTask.jsx","Home/Home.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Hidden","SetNewPath","path","props","className","styles","to","activeClassName","activeLink","onClick","React","Component","NawBar","state","isHidden","changeStateNawBar","setState","this","Show","Name","Qualitys","arrQ","map","el","num","key","Quality","Input","error","title","onChangeTitle","e","currentTarget","value","addNewTitle","updateData","pressEnter","ErrorRed","InputBlue","onChange","onKeyPress","InputForm","refLinkInput","FirstTask","Names","name","newNemes","Home","App","infoPage","path1","infoPageChanges","alert","Switch","app","Route","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8db42dd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Hidden\":\"NawBar_Hidden__1h1_C\",\"Show\":\"NawBar_Show__62fpZ\",\"activeLink\":\"NawBar_activeLink__hRA-N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2eRQ2\",\"FirstTask\":\"App_FirstTask__144in\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2ORbD\",\"ErrorRed\":\"Input_ErrorRed__2Agwq\",\"InputBlue\":\"Input_InputBlue__2WlId\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Name\":\"Name_Name__3FyJG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quality\":\"Quality_Quality__1D-_4\"};","import React from 'react';\r\nimport styles from \"./NawBar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nclass Hidden extends React.Component {\r\n\r\n    SetNewPath = (path) => {\r\n        this.props.SetNewPath(path)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Hidden}>\r\n                {\"HIDDEN\"}\r\n                <br/>\r\n                <NavLink to= \"/Home\" activeClassName ={styles.activeLink} onClick={() => this.SetNewPath('/Home')}> Home </NavLink>\r\n                <br/>\r\n                <NavLink to= \"/FirstTask\" activeClassName ={styles.activeLink} onClick={() => this.SetNewPath('/FirstTask')}> FirstTask </NavLink>\r\n                <br/>\r\n                <NavLink to= \"/SecondTask\" activeClassName ={styles.activeLink} onClick={() => this.SetNewPath('/SecondTask')}> SecondTask </NavLink>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Hidden;\r\n","import React from 'react';\r\nimport styles from \"./NawBar.module.css\";\r\nimport Hidden from \"./Hidden\";\r\n\r\n\r\nclass NawBar extends React.Component {\r\n    state = {\r\n        isHidden: false\r\n    }\r\n    changeStateNawBar = () => {\r\n        this.state.isHidden ? this.setState({isHidden: false}) : this.setState({isHidden: true})\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.isHidden && <span\r\n                    onClick={() => this.changeStateNawBar()}>\r\n                    <Hidden SetNewPath={this.props.SetNewPath}/>\r\n                </span>}\r\n                {!this.state.isHidden && <span\r\n                    onClick={() => this.changeStateNawBar()}\r\n                    className={styles.Show}>\r\n                    S<br/>H<br/>O<br/>W</span>}\r\n            </div>\r\n\r\n        )\r\n            ;\r\n    }\r\n}\r\n\r\nexport default NawBar;\r\n","import React from 'react';\r\nimport styles from './Name.module.css';\r\n\r\nfunction Name() {\r\n    return (\r\n        <div className={styles.Name}>\r\n           <h1>MY NAME'S VADIM</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Name;\r\n","import React from 'react';\r\nimport styles from './Quality.module.css';\r\n\r\nfunction Qualitys() {\r\n    const Quality = ['skill ', 'skill ', 'skill '];\r\n    const arrQ = Quality.map((el, num) => <div key={num}>  {el}  </div>)\r\n    return (\r\n        <div className={styles.Quality}>\r\n            {arrQ}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Qualitys;\r\n","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nclass Input extends React.Component {\r\n\r\n    state = {\r\n        error: false,\r\n        title: \"\",\r\n    };\r\n\r\n    onChangeTitle = (e) => {\r\n        this.setState({\r\n            title: e.currentTarget.value,\r\n            error: false\r\n        })\r\n        if (e.currentTarget.value === \"\") {\r\n            this.setState({error: true})\r\n        }\r\n    }\r\n\r\n    addNewTitle = () => {\r\n        if (this.state.title === \"\") {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.props.updateData(this.state.title)\r\n            this.setState({\r\n                title: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    pressEnter = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.addNewTitle()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.Input}>\r\n                <input\r\n                    className={(this.state.error) ? styles.ErrorRed : styles.InputBlue}\r\n                    onChange={this.onChangeTitle}\r\n                    onKeyPress={this.pressEnter}\r\n                    value={this.state.title}\r\n                />\r\n                <div>\r\n                    <button onClick={this.addNewTitle}>ADD</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport Input from \"./Input\";\r\nfunction InputForm(props) {\r\n    return (\r\n        <div>\r\n            <Input refLinkInput={props.refLinkInput} updateData={props.updateData}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport Name from '../Name/Name.jsx';\r\nimport styles from '../App.module.css';\r\nimport Qualitys from \"../myQualities/Qualitys\";\r\nimport InputForm from \"../Input/InputForm\";\r\n\r\nclass FirstTask extends React.Component {\r\n    state = {\r\n        Names: [],\r\n    };\r\n\r\n    updateData = (name) => {\r\n        {\r\n            this.setState({Names: [...this.state.Names,  \"hi, \" + name]});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const newNemes =\r\n            this.state.Names.map((el, key) => <div key={key}>{el} </div>)\r\n        return (\r\n            <div className={styles.FirstTask}>\r\n                <Name/>\r\n                <Qualitys/>\r\n                <InputForm updateData={this.updateData}/>\r\n                {newNemes}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FirstTask;\r\n","import React from 'react';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            HOME PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport NawBar from \"./NawBar/NawBar\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\nimport FirstTask from \"./FirstTask/FirstTask\";\r\nimport Home from \"./Home/Home\";\r\nimport Switch from \"react-router-dom/es/Switch\";\r\nimport Route from \"react-router-dom/es/Route\";\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        infoPage: '',\r\n        path1: '/Home'\r\n    };\r\n    infoPageChanges = (e) => {\r\n        alert(e.name)\r\n    }\r\n\r\n    SetNewPath = (path) => {\r\n        this.setState({\r\n            path1: path\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Switch>\r\n                    <div className={styles.app}>\r\n                        <NawBar SetNewPath={this.SetNewPath}/>\r\n                        <div>\r\n                            <Route path=\"/Home\" component={Home}/>\r\n                            <Route path=\"/FirstTask\" component={FirstTask}/>\r\n                            <Route path=\"/SecondTask\" component={FirstTask}/>\r\n                        </div>\r\n                    </div>\r\n                </Switch>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}